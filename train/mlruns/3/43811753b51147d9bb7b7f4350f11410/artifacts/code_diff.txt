diff --git "a/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb" "b/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb"
index 2443519..5bd5702 100644
--- "a/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb"
+++ "b/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb"
@@ -2,127 +2,844 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 5,
    "metadata": {},
    "outputs": [],
    "source": [
-    "## 自造表达式引擎\n",
-    "## 参考：\n",
-    "## https://blog.csdn.net/itnerd/article/details/136041182\n",
-    "## https://zhuanlan.zhihu.com/p/679186652\n",
-    "## https://blog.csdn.net/weixin_38175458/article/details/139828021\n",
-    "import sys\n",
-    "sys.path.append(\"..\")\n",
-    "from utils.qlib_exp_engine import *\n",
-    "import re\n",
-    "import pandas as pd\n",
-    "\n",
-    "\n",
+    "## 数据集转换\n",
+    "import os\n",
+    "data_path = \"../data/cleaned/csi300_stock_feats.csv\"\n",
+    "if not os.path.exists(data_path):\n",
+    "    import qlib\n",
+    "    from qlib.data import D\n",
+    "    # 初始化 Qlib 的数据存储\n",
+    "    qlib.init(provider_uri = \"../data/raw/qlib_data/cn_data\")\n",
+    "    fields = ['$open', '$high', '$low', '$close', '$volume', '$amount', '$vwap']\n",
+    "    df = D.features(D.instruments(market='csi300'), fields, start_time='20160101', end_time='20201231', freq='day')\n",
+    "    df.to_csv(\"../data/cleaned/csi300_stock_feats.csv\")\n",
+    "    print(df)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 43,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "SH600009\n"
+     ]
+    }
+   ],
+   "source": [
+    "## 数据读取+特征转换\n",
+    "import polars as pl\n",
+    "from polars_ta.prefix.tdx import *\n",
+    "from polars_ta.prefix.wq import *\n",
     "\n",
-    "def parse_field(field):\n",
-    "    # Following patterns will be matched:\n",
-    "    # - $close -> Feature(\"close\")\n",
-    "    # - $close5 -> Feature(\"close5\")\n",
-    "    # - $open+$close -> Feature(\"open\")+Feature(\"close\")\n",
+    "OPEN, HIGH, LOW, CLOSE, VOLUME, AMOUNT, VWAP = [pl.col(col) for col in ['open', 'high', 'low', 'close', 'volume', 'amount', 'vwap']]\n",
     "\n",
-    "    if not isinstance(field, str):\n",
-    "        field = str(field)\n",
+    "def fast_linregress(x, y):\n",
+    "            x_mean = np.mean(x)\n",
+    "            y_mean = np.mean(y)\n",
+    "            slope = np.dot(x - x_mean, y - y_mean) / np.dot(x - x_mean, x - x_mean)\n",
+    "            intercept = y_mean - slope * x_mean\n",
+    "            y_pred = slope * x + intercept\n",
+    "            ss_total = np.sum((y - np.mean(y)) ** 2) + 1e-12\n",
+    "            ss_residual = np.sum((y - y_pred) ** 2)\n",
+    "            r2 = 1 - (ss_residual / ss_total)\n",
+    "            resd = np.sum(y - y_pred)\n",
+    "            return slope, intercept, r2, resd\n",
     "\n",
-    "    for pattern, new in [\n",
-    "        (rf\"\\$([\\w]+)\", r'Feature(\"\\1\")'),\n",
-    "    ]:  # Features  # Operators\n",
-    "        field = re.sub(pattern, new, field)\n",
-    "    return field\n",
+    "def func_ts_date(df: pl.DataFrame) -> pl.DataFrame:\n",
+    "    print(df['instrument'][0])\n",
+    "    df = df.sort(by=['datetime'])\n",
+    "    df = df.with_columns([\n",
+    "        ((CLOSE - OPEN) / OPEN).alias('KMID'),\n",
+    "        ((HIGH - LOW) / OPEN).alias(\"KLEN\"),\n",
+    "        ((CLOSE - OPEN) / (HIGH - LOW + 1e-12)).alias(\"KMID2\"),\n",
+    "        ((HIGH - max_(OPEN, CLOSE)) / OPEN).alias(\"KUP\"),\n",
+    "        ((HIGH - max_(OPEN, CLOSE)) / (HIGH - LOW + 1e-12)).alias(\"KUP2\"),\n",
+    "        ((min_(OPEN, CLOSE) - LOW) / OPEN).alias(\"KLOW\"),\n",
+    "        ((min_(OPEN, CLOSE) - LOW) / (HIGH - LOW + 1e-12)).alias(\"KLOW2\"),\n",
+    "        ((2 * CLOSE - HIGH - LOW) / OPEN).alias(\"KSFT\"),\n",
+    "        ((2 * CLOSE - HIGH - LOW) / (HIGH - LOW + 1e-12)).alias(\"KSFT2\"),\n",
+    "        *[(ts_delay(OPEN, i) / CLOSE).alias(f'OPEN{i}') for i in [0]],\n",
+    "        *[(ts_delay(HIGH, i) / CLOSE).alias(f'HIGH{i}') for i in [0]],\n",
+    "        *[(ts_delay(LOW, i) / CLOSE).alias(f'LOW{i}') for i in [0]],\n",
+    "        *[(ts_delay(VWAP, i) / CLOSE).alias(f'VWAP{i}') for i in [0]],\n",
+    "    ])\n",
+    "    for i in [5,10,20,30,60]:\n",
+    "        df = df.with_columns([\n",
+    "            (ts_delay(CLOSE, i) / CLOSE).alias(f'ROC{i}'),\n",
+    "            (ts_mean(CLOSE, i) / CLOSE).alias(f'MA{i}'),\n",
+    "            (CLOSE.rolling_std(i) / CLOSE).alias(f'STD{i}'),\n",
+    "            (CLOSE.rolling_max(i) / CLOSE).alias(f'MAX{i}'),\n",
+    "            (CLOSE.rolling_min(i) / CLOSE).alias(f'MIN{i}'),\n",
+    "            (CLOSE.rolling_quantile(0.8, interpolation='linear', window_size=i) / CLOSE).alias(f'QTLU{i}'),\n",
+    "            (CLOSE.rolling_quantile(0.2, interpolation='linear', window_size=i) / CLOSE).alias(f'QTLD{i}'),\n",
+    "            (ts_rank(CLOSE, i)).alias(f'RANK{i}'),\n",
+    "            (ts_RSV(HIGH, LOW, CLOSE, i)).alias(f'RSV{i}'),\n",
+    "            (1 - ts_arg_max(HIGH, i) / i).alias(f'IMAX{i}'),\n",
+    "            (1 - ts_arg_min(LOW, i) / i).alias(f'IMIN{i}'),\n",
+    "            (ts_corr(CLOSE, log1p(VOLUME), i)).alias(f'CORR{i}'),\n",
+    "            (ts_corr(CLOSE / ts_delay(CLOSE, 1), log1p(VOLUME / ts_delay(VOLUME, 1)), i)).alias(f'CORD{i}'),\n",
+    "            (ts_mean(CLOSE > ts_delay(CLOSE, 1), i)).alias(f'CNTP{i}'),\n",
+    "            (ts_mean(CLOSE < ts_delay(CLOSE, 1), i)).alias(f'CNTN{i}'),\n",
+    "            (ts_sum(max_(CLOSE - ts_delay(CLOSE, 1), 0), i) / (ts_sum(abs_(CLOSE - ts_delay(CLOSE, 1)), i) + 1e-12)).alias(f'SUMP{i}'),\n",
+    "            (ts_sum(max_(ts_delay(CLOSE, 1) - CLOSE, 0), i) / (ts_sum(abs_(CLOSE - ts_delay(CLOSE, 1)), i) + 1e-12)).alias(f'SUMN{i}'),\n",
+    "            (ts_mean(VOLUME, i) / (VOLUME + 1e-12)).alias(f'VMA{i}'),\n",
+    "            (VOLUME.rolling_std(i) / (VOLUME + 1e-12)).alias(f'VSTD{i}'),\n",
+    "            ((abs_(ts_returns(CLOSE, 1)) * VOLUME).rolling_std(i) / (ts_mean(abs_(ts_returns(CLOSE, 1)) * VOLUME, i) + 1e-12)).alias(f'WVMA{i}'),\n",
+    "            (ts_sum(max_(VOLUME - ts_delay(VOLUME, 1), 0), i) / (ts_sum(abs_(VOLUME - ts_delay(VOLUME, 1)), i) + 1e-12)).alias(f'VSUMP{i}'),\n",
+    "            (ts_sum(max_(ts_delay(VOLUME, 1) - VOLUME, 0), i) / (ts_sum(abs_(VOLUME - ts_delay(VOLUME, 1)), i) + 1e-12)).alias(f'VSUMN{i}')\n",
+    "        ])\n",
+    "        df = df.with_columns([\n",
+    "            (pl.col(f\"IMAX{i}\") -pl.col(f\"IMIN{i}\")).alias(f\"IMXD{i}\"),\n",
+    "            (pl.col(f\"CNTP{i}\") - pl.col(f\"CNTN{i}\")).alias(f'CNTD{i}'),\n",
+    "            (pl.col(f\"SUMP{i}\") - pl.col(f\"SUMN{i}\")).alias(f'SUMD{i}'),\n",
+    "            (pl.col(f\"VSUMP{i}\") - pl.col(f\"VSUMN{i}\")).alias(f'VSUMD{i}'),\n",
+    "        ])\n",
     "\n",
+    "        reg = [fast_linregress(x = np.arange(i), y = df[\"close\"][idx: idx + i].to_numpy()) for idx in range(len(df) - i + 1)]\n",
+    "        beta = [None] * (i - 1) + [item[0] for item in reg if item]\n",
+    "        rsqr = [None] * (i - 1) + [item[2] for item in reg if item]\n",
+    "        resi = [None] * (i - 1) + [item[3] for item in reg if item]\n",
+    "        row_n = len(df)\n",
+    "        df = df.with_columns([\n",
+    "            pl.Series(f'BETA{i}', beta[:row_n]),\n",
+    "            pl.Series(f'RSQR{i}', rsqr[:row_n]),\n",
+    "            pl.Series(f'RESI{i}', resi[:row_n]),\n",
+    "        ])\n",
+    "    return df\n",
     "\n",
-    "def compute_feature(df, exp):\n",
-    "    exp = eval(parse_field(exp))\n",
-    "    return exp.load(df, df.index[0], df.index[-1])\n",
+    "pldf = pl.read_csv(\"../data/cleaned/csi300_stock_feats.csv\")\n",
+    "# pldf = pldf.group_by('instrument').map_groups(func_ts_date)\n",
+    "# print(pldf)\n",
     "\n",
-    "def compute_features(df, exps, labels):\n",
-    "    data = dict()\n",
-    "    for label, exp in zip(labels, exps):\n",
-    "        # print(label,exp)\n",
-    "        data[label] = compute_feature(df, exp)\n",
-    "    if len(data) > 1:\n",
-    "        return pd.concat(data, axis=1)\n",
-    "    else:\n",
-    "        return pd.DataFrame(data)"
+    "pldf = func_ts_date(pldf.filter(pl.col('instrument') == 'SH600009'))"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": 12,
+   "execution_count": 44,
    "metadata": {},
    "outputs": [],
    "source": [
-    "import qlib\n",
-    "import pandas as pd\n",
-    "from qlib.contrib.data.handler import Alpha158\n",
-    "from qlib.data.dataset.handler import DataHandlerLP\n",
-    "from qlib.data.dataset.loader import StaticDataLoader, QlibDataLoader, DLWParser\n",
-    "from qlib.data.dataset import DatasetH\n",
-    "\n",
-    "## 特征与标签配置\n",
-    "feature_config = Alpha158.parse_config_to_fields(dict(price={\"windows\": [0],\"feature\": [\"OPEN\", \"HIGH\", \"LOW\", \"VWAP\"]},rolling={},kbar={}))\n",
-    "label_config = ([\"Ref($close, -1)/$close-1\"],['LABEL0']) \n",
-    "\n",
-    "\n",
-    "## 加载数据\n",
-    "# qlib.init(provider_uri = \"../data/raw/qlib_data/cn_data\")\n",
-    "# dl = QlibDataLoader(config = {\"feature\":feature_config, \"label\":label_config})\n",
-    "df = pd.read_csv('../data/cleaned/csi300_stock_feats.csv', index_col=[\"datetime\"])\n",
-    "instruments = df.groupby(by='instrument')\n",
-    "# for name, instrument in instruments:\n",
-    "#     print(name)\n",
-    "#     df2=compute_features(instrument, *feature_config)\n",
-    "df = df.loc[df['instrument'] == 'SH600005']\n",
-    "df2=compute_features(df, *feature_config)"
+    "df = pldf.to_pandas()\n",
+    "df.set_index(['instrument', 'datetime'], inplace=True)\n",
+    "features = df[[col for col in df.columns if col.isupper()]]\n",
+    "labels = df[['close']]"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 60,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[834910:MainThread](2024-11-10 10:48:23,184) INFO - qlib.timer - [log.py:127] - Time cost: 0.009s | Loading data Done\n",
+      "[834910:MainThread](2024-11-10 10:48:23,187) INFO - qlib.timer - [log.py:127] - Time cost: 0.000s | fit & process data Done\n",
+      "[834910:MainThread](2024-11-10 10:48:23,190) INFO - qlib.timer - [log.py:127] - Time cost: 0.015s | Init data Done\n"
+     ]
+    }
+   ],
    "source": [
-    "df = compute_features(df, *label_config)\n",
-    "dl = StaticDataLoader(config=df)\n",
+    "## 数据装载\n",
+    "from qlib.data.dataset.loader import StaticDataLoader\n",
+    "from qlib.data.dataset.handler import DataHandlerLP\n",
+    "from qlib.data.dataset import DatasetH\n",
     "\n",
+    "## 创建数据加载器\n",
+    "dl = StaticDataLoader(config=dict(feature=features,label=labels))\n",
     "## 创建数据处理器\n",
-    "dh = DataHandlerLP(\n",
-    "    instruments='csi300', \n",
-    "    start_time='20160101', \n",
-    "    end_time='20191231',\n",
-    "    data_loader=dl\n",
-    ")\n",
-    "\n",
+    "dh = DataHandlerLP(data_loader=dl)\n",
     "## 创建数据集\n",
-    "ds = DatasetH(handler=dh,segments={\"train\": ('20160101', '20171231'), \"valid\": ('20170101', '20181231'),\"test\": ('20180101', '20191231')})"
+    "ds = DatasetH(handler=dh, segments={\"train\": ('2016-01-01', '2016-12-31'), \"valid\": ('2017-01-01', '2018-12-31'),\"test\": ('2018-01-01', '2018-12-31')})"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 61,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/html": [
+       "<div>\n",
+       "<style scoped>\n",
+       "    .dataframe tbody tr th:only-of-type {\n",
+       "        vertical-align: middle;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe tbody tr th {\n",
+       "        vertical-align: top;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr th {\n",
+       "        text-align: left;\n",
+       "    }\n",
+       "\n",
+       "    .dataframe thead tr:last-of-type th {\n",
+       "        text-align: right;\n",
+       "    }\n",
+       "</style>\n",
+       "<table border=\"1\" class=\"dataframe\">\n",
+       "  <thead>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th colspan=\"20\" halign=\"left\">feature</th>\n",
+       "      <th>label</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th>KMID</th>\n",
+       "      <th>KLEN</th>\n",
+       "      <th>KMID2</th>\n",
+       "      <th>KUP</th>\n",
+       "      <th>KUP2</th>\n",
+       "      <th>KLOW</th>\n",
+       "      <th>KLOW2</th>\n",
+       "      <th>KSFT</th>\n",
+       "      <th>KSFT2</th>\n",
+       "      <th>OPEN0</th>\n",
+       "      <th>...</th>\n",
+       "      <th>VSUMP60</th>\n",
+       "      <th>VSUMN60</th>\n",
+       "      <th>IMXD60</th>\n",
+       "      <th>CNTD60</th>\n",
+       "      <th>SUMD60</th>\n",
+       "      <th>VSUMD60</th>\n",
+       "      <th>BETA60</th>\n",
+       "      <th>RSQR60</th>\n",
+       "      <th>RESI60</th>\n",
+       "      <th>close</th>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>instrument</th>\n",
+       "      <th>datetime</th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "      <th></th>\n",
+       "    </tr>\n",
+       "  </thead>\n",
+       "  <tbody>\n",
+       "    <tr>\n",
+       "      <th rowspan=\"11\" valign=\"top\">SH600009</th>\n",
+       "      <th>2016-01-04</th>\n",
+       "      <td>-0.042668</td>\n",
+       "      <td>0.046393</td>\n",
+       "      <td>-0.919709</td>\n",
+       "      <td>0.000339</td>\n",
+       "      <td>0.007298</td>\n",
+       "      <td>0.003386</td>\n",
+       "      <td>0.072993</td>\n",
+       "      <td>-0.039621</td>\n",
+       "      <td>-0.854014</td>\n",
+       "      <td>1.044570</td>\n",
+       "      <td>...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2.604563</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-01-05</th>\n",
+       "      <td>0.045058</td>\n",
+       "      <td>0.061047</td>\n",
+       "      <td>0.738096</td>\n",
+       "      <td>0.015988</td>\n",
+       "      <td>0.261904</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.029070</td>\n",
+       "      <td>0.476191</td>\n",
+       "      <td>0.956885</td>\n",
+       "      <td>...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2.649873</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-01-06</th>\n",
+       "      <td>0.020761</td>\n",
+       "      <td>0.027336</td>\n",
+       "      <td>0.759496</td>\n",
+       "      <td>0.003114</td>\n",
+       "      <td>0.113923</td>\n",
+       "      <td>0.003460</td>\n",
+       "      <td>0.126582</td>\n",
+       "      <td>0.021107</td>\n",
+       "      <td>0.772154</td>\n",
+       "      <td>0.979661</td>\n",
+       "      <td>...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2.717998</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-01-07</th>\n",
+       "      <td>-0.041110</td>\n",
+       "      <td>0.046591</td>\n",
+       "      <td>-0.882355</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.005481</td>\n",
+       "      <td>0.117645</td>\n",
+       "      <td>-0.035629</td>\n",
+       "      <td>-0.764709</td>\n",
+       "      <td>1.042873</td>\n",
+       "      <td>...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2.578897</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2016-01-08</th>\n",
+       "      <td>-0.019244</td>\n",
+       "      <td>0.041987</td>\n",
+       "      <td>-0.458334</td>\n",
+       "      <td>0.008048</td>\n",
+       "      <td>0.191667</td>\n",
+       "      <td>0.014696</td>\n",
+       "      <td>0.349999</td>\n",
+       "      <td>-0.012596</td>\n",
+       "      <td>-0.300001</td>\n",
+       "      <td>1.019622</td>\n",
+       "      <td>...</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>NaN</td>\n",
+       "      <td>2.582699</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>...</th>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "      <td>...</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-12-25</th>\n",
+       "      <td>0.028814</td>\n",
+       "      <td>0.033898</td>\n",
+       "      <td>0.850001</td>\n",
+       "      <td>0.002260</td>\n",
+       "      <td>0.066666</td>\n",
+       "      <td>0.002825</td>\n",
+       "      <td>0.083332</td>\n",
+       "      <td>0.029379</td>\n",
+       "      <td>0.866667</td>\n",
+       "      <td>0.971993</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.498760</td>\n",
+       "      <td>0.501240</td>\n",
+       "      <td>0.283333</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.065092</td>\n",
+       "      <td>-0.002481</td>\n",
+       "      <td>0.018139</td>\n",
+       "      <td>0.382410</td>\n",
+       "      <td>2.042810e-14</td>\n",
+       "      <td>7.086819</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-12-28</th>\n",
+       "      <td>-0.019204</td>\n",
+       "      <td>0.031276</td>\n",
+       "      <td>-0.614035</td>\n",
+       "      <td>0.012071</td>\n",
+       "      <td>0.385965</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>-0.031276</td>\n",
+       "      <td>-1.000000</td>\n",
+       "      <td>1.019580</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.507968</td>\n",
+       "      <td>0.492032</td>\n",
+       "      <td>0.283333</td>\n",
+       "      <td>-0.033333</td>\n",
+       "      <td>0.040774</td>\n",
+       "      <td>0.015937</td>\n",
+       "      <td>0.017166</td>\n",
+       "      <td>0.345743</td>\n",
+       "      <td>5.151435e-14</td>\n",
+       "      <td>6.956591</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-12-29</th>\n",
+       "      <td>0.006207</td>\n",
+       "      <td>0.029655</td>\n",
+       "      <td>0.209303</td>\n",
+       "      <td>0.019724</td>\n",
+       "      <td>0.665115</td>\n",
+       "      <td>0.003724</td>\n",
+       "      <td>0.125583</td>\n",
+       "      <td>-0.009793</td>\n",
+       "      <td>-0.330229</td>\n",
+       "      <td>0.993831</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.505316</td>\n",
+       "      <td>0.494684</td>\n",
+       "      <td>0.283333</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.070881</td>\n",
+       "      <td>0.010631</td>\n",
+       "      <td>0.016324</td>\n",
+       "      <td>0.317280</td>\n",
+       "      <td>-4.440892e-15</td>\n",
+       "      <td>7.097592</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-12-30</th>\n",
+       "      <td>0.008396</td>\n",
+       "      <td>0.025327</td>\n",
+       "      <td>0.331520</td>\n",
+       "      <td>0.006056</td>\n",
+       "      <td>0.239131</td>\n",
+       "      <td>0.010874</td>\n",
+       "      <td>0.429350</td>\n",
+       "      <td>0.013214</td>\n",
+       "      <td>0.521739</td>\n",
+       "      <td>0.991674</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.507342</td>\n",
+       "      <td>0.492658</td>\n",
+       "      <td>0.283333</td>\n",
+       "      <td>0.000000</td>\n",
+       "      <td>0.063899</td>\n",
+       "      <td>0.014683</td>\n",
+       "      <td>0.015636</td>\n",
+       "      <td>0.294303</td>\n",
+       "      <td>-1.332268e-14</td>\n",
+       "      <td>7.127693</td>\n",
+       "    </tr>\n",
+       "    <tr>\n",
+       "      <th>2020-12-31</th>\n",
+       "      <td>0.027291</td>\n",
+       "      <td>0.058113</td>\n",
+       "      <td>0.469626</td>\n",
+       "      <td>0.021996</td>\n",
+       "      <td>0.378505</td>\n",
+       "      <td>0.008825</td>\n",
+       "      <td>0.151869</td>\n",
+       "      <td>0.014121</td>\n",
+       "      <td>0.242989</td>\n",
+       "      <td>0.973434</td>\n",
+       "      <td>...</td>\n",
+       "      <td>0.528561</td>\n",
+       "      <td>0.471439</td>\n",
+       "      <td>0.283333</td>\n",
+       "      <td>0.033333</td>\n",
+       "      <td>0.104689</td>\n",
+       "      <td>0.057122</td>\n",
+       "      <td>0.015243</td>\n",
+       "      <td>0.282659</td>\n",
+       "      <td>-7.993606e-15</td>\n",
+       "      <td>7.361217</td>\n",
+       "    </tr>\n",
+       "  </tbody>\n",
+       "</table>\n",
+       "<p>1218 rows × 159 columns</p>\n",
+       "</div>"
+      ],
+      "text/plain": [
+       "                        feature                                          \\\n",
+       "                           KMID      KLEN     KMID2       KUP      KUP2   \n",
+       "instrument datetime                                                       \n",
+       "SH600009   2016-01-04 -0.042668  0.046393 -0.919709  0.000339  0.007298   \n",
+       "           2016-01-05  0.045058  0.061047  0.738096  0.015988  0.261904   \n",
+       "           2016-01-06  0.020761  0.027336  0.759496  0.003114  0.113923   \n",
+       "           2016-01-07 -0.041110  0.046591 -0.882355  0.000000  0.000000   \n",
+       "           2016-01-08 -0.019244  0.041987 -0.458334  0.008048  0.191667   \n",
+       "...                         ...       ...       ...       ...       ...   \n",
+       "           2020-12-25  0.028814  0.033898  0.850001  0.002260  0.066666   \n",
+       "           2020-12-28 -0.019204  0.031276 -0.614035  0.012071  0.385965   \n",
+       "           2020-12-29  0.006207  0.029655  0.209303  0.019724  0.665115   \n",
+       "           2020-12-30  0.008396  0.025327  0.331520  0.006056  0.239131   \n",
+       "           2020-12-31  0.027291  0.058113  0.469626  0.021996  0.378505   \n",
+       "\n",
+       "                                                                         ...  \\\n",
+       "                           KLOW     KLOW2      KSFT     KSFT2     OPEN0  ...   \n",
+       "instrument datetime                                                      ...   \n",
+       "SH600009   2016-01-04  0.003386  0.072993 -0.039621 -0.854014  1.044570  ...   \n",
+       "           2016-01-05  0.000000  0.000000  0.029070  0.476191  0.956885  ...   \n",
+       "           2016-01-06  0.003460  0.126582  0.021107  0.772154  0.979661  ...   \n",
+       "           2016-01-07  0.005481  0.117645 -0.035629 -0.764709  1.042873  ...   \n",
+       "           2016-01-08  0.014696  0.349999 -0.012596 -0.300001  1.019622  ...   \n",
+       "...                         ...       ...       ...       ...       ...  ...   \n",
+       "           2020-12-25  0.002825  0.083332  0.029379  0.866667  0.971993  ...   \n",
+       "           2020-12-28  0.000000  0.000000 -0.031276 -1.000000  1.019580  ...   \n",
+       "           2020-12-29  0.003724  0.125583 -0.009793 -0.330229  0.993831  ...   \n",
+       "           2020-12-30  0.010874  0.429350  0.013214  0.521739  0.991674  ...   \n",
+       "           2020-12-31  0.008825  0.151869  0.014121  0.242989  0.973434  ...   \n",
+       "\n",
+       "                                                                         \\\n",
+       "                        VSUMP60   VSUMN60    IMXD60    CNTD60    SUMD60   \n",
+       "instrument datetime                                                       \n",
+       "SH600009   2016-01-04       NaN       NaN       NaN       NaN       NaN   \n",
+       "           2016-01-05       NaN       NaN       NaN       NaN       NaN   \n",
+       "           2016-01-06       NaN       NaN       NaN       NaN       NaN   \n",
+       "           2016-01-07       NaN       NaN       NaN       NaN       NaN   \n",
+       "           2016-01-08       NaN       NaN       NaN       NaN       NaN   \n",
+       "...                         ...       ...       ...       ...       ...   \n",
+       "           2020-12-25  0.498760  0.501240  0.283333  0.000000  0.065092   \n",
+       "           2020-12-28  0.507968  0.492032  0.283333 -0.033333  0.040774   \n",
+       "           2020-12-29  0.505316  0.494684  0.283333  0.000000  0.070881   \n",
+       "           2020-12-30  0.507342  0.492658  0.283333  0.000000  0.063899   \n",
+       "           2020-12-31  0.528561  0.471439  0.283333  0.033333  0.104689   \n",
+       "\n",
+       "                                                                      label  \n",
+       "                        VSUMD60    BETA60    RSQR60        RESI60     close  \n",
+       "instrument datetime                                                          \n",
+       "SH600009   2016-01-04       NaN       NaN       NaN           NaN  2.604563  \n",
+       "           2016-01-05       NaN       NaN       NaN           NaN  2.649873  \n",
+       "           2016-01-06       NaN       NaN       NaN           NaN  2.717998  \n",
+       "           2016-01-07       NaN       NaN       NaN           NaN  2.578897  \n",
+       "           2016-01-08       NaN       NaN       NaN           NaN  2.582699  \n",
+       "...                         ...       ...       ...           ...       ...  \n",
+       "           2020-12-25 -0.002481  0.018139  0.382410  2.042810e-14  7.086819  \n",
+       "           2020-12-28  0.015937  0.017166  0.345743  5.151435e-14  6.956591  \n",
+       "           2020-12-29  0.010631  0.016324  0.317280 -4.440892e-15  7.097592  \n",
+       "           2020-12-30  0.014683  0.015636  0.294303 -1.332268e-14  7.127693  \n",
+       "           2020-12-31  0.057122  0.015243  0.282659 -7.993606e-15  7.361217  \n",
+       "\n",
+       "[1218 rows x 159 columns]"
+      ]
+     },
+     "execution_count": 61,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-    "test = instruments.get_group('SH600000')\n",
-    "print(compute_features(test, *feature_config))"
+    "dl.load()"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 62,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "data": {
+      "text/plain": [
+       "[                           KMID      KLEN     KMID2       KUP      KUP2  \\\n",
+       " instrument datetime                                                       \n",
+       " SH600009   2016-01-04 -0.042668  0.046393 -0.919709  0.000339  0.007298   \n",
+       "            2016-01-05  0.045058  0.061047  0.738096  0.015988  0.261904   \n",
+       "            2016-01-06  0.020761  0.027336  0.759496  0.003114  0.113923   \n",
+       "            2016-01-07 -0.041110  0.046591 -0.882355  0.000000  0.000000   \n",
+       "            2016-01-08 -0.019244  0.041987 -0.458334  0.008048  0.191667   \n",
+       " ...                         ...       ...       ...       ...       ...   \n",
+       "            2016-12-26 -0.004458  0.017831 -0.249997  0.000000  0.000000   \n",
+       "            2016-12-27 -0.009328  0.012313 -0.757577  0.002985  0.242423   \n",
+       "            2016-12-28  0.000755  0.016981  0.044442  0.012075  0.711112   \n",
+       "            2016-12-29 -0.001515  0.006061 -0.249990  0.003030  0.500007   \n",
+       "            2016-12-30  0.004926  0.010231  0.481479  0.003031  0.296297   \n",
+       " \n",
+       "                            KLOW     KLOW2      KSFT     KSFT2     OPEN0  ...  \\\n",
+       " instrument datetime                                                      ...   \n",
+       " SH600009   2016-01-04  0.003386  0.072993 -0.039621 -0.854014  1.044570  ...   \n",
+       "            2016-01-05  0.000000  0.000000  0.029070  0.476191  0.956885  ...   \n",
+       "            2016-01-06  0.003460  0.126582  0.021107  0.772154  0.979661  ...   \n",
+       "            2016-01-07  0.005481  0.117645 -0.035629 -0.764709  1.042873  ...   \n",
+       "            2016-01-08  0.014696  0.349999 -0.012596 -0.300001  1.019622  ...   \n",
+       " ...                         ...       ...       ...       ...       ...  ...   \n",
+       "            2016-12-26  0.013373  0.750003  0.008915  0.500006  1.004478  ...   \n",
+       "            2016-12-27  0.000000  0.000000 -0.012313 -1.000000  1.009416  ...   \n",
+       "            2016-12-28  0.004151  0.244447 -0.007170 -0.422223  0.999246  ...   \n",
+       "            2016-12-29  0.001515  0.250003 -0.003030 -0.499993  1.001517  ...   \n",
+       "            2016-12-30  0.002274  0.222224  0.004168  0.407405  0.995098  ...   \n",
+       " \n",
+       "                         VSUMP60   VSUMN60    IMXD60    CNTD60    SUMD60  \\\n",
+       " instrument datetime                                                       \n",
+       " SH600009   2016-01-04       NaN       NaN       NaN       NaN       NaN   \n",
+       "            2016-01-05       NaN       NaN       NaN       NaN       NaN   \n",
+       "            2016-01-06       NaN       NaN       NaN       NaN       NaN   \n",
+       "            2016-01-07       NaN       NaN       NaN       NaN       NaN   \n",
+       "            2016-01-08       NaN       NaN       NaN       NaN       NaN   \n",
+       " ...                         ...       ...       ...       ...       ...   \n",
+       "            2016-12-26  0.495006  0.504994  0.233333  0.066667 -0.022448   \n",
+       "            2016-12-27  0.498995  0.501005  0.233333  0.033333 -0.076923   \n",
+       "            2016-12-28  0.529327  0.470673  0.233333  0.033333 -0.053448   \n",
+       "            2016-12-29  0.523332  0.476668  0.233333  0.000000 -0.077707   \n",
+       "            2016-12-30  0.516608  0.483392  0.233333  0.033333 -0.055440   \n",
+       " \n",
+       "                         VSUMD60    BETA60    RSQR60        RESI60     close  \n",
+       " instrument datetime                                                          \n",
+       " SH600009   2016-01-04       NaN       NaN       NaN           NaN  2.604563  \n",
+       "            2016-01-05       NaN       NaN       NaN           NaN  2.649873  \n",
+       "            2016-01-06       NaN       NaN       NaN           NaN  2.717998  \n",
+       "            2016-01-07       NaN       NaN       NaN           NaN  2.578897  \n",
+       "            2016-01-08       NaN       NaN       NaN           NaN  2.582699  \n",
+       " ...                         ...       ...       ...           ...       ...  \n",
+       "            2016-12-26 -0.009989 -0.001016  0.317387 -7.549517e-15  2.506337  \n",
+       "            2016-12-27 -0.002010 -0.001045  0.330078  2.442491e-14  2.482890  \n",
+       "            2016-12-28  0.058653 -0.001112  0.364089  3.108624e-15  2.480038  \n",
+       "            2016-12-29  0.046665 -0.001195  0.401394  1.776357e-15  2.465146  \n",
+       "            2016-12-30  0.033215 -0.001252  0.430767 -8.881784e-15  2.480038  \n",
+       " \n",
+       " [244 rows x 159 columns],\n",
+       "                            KMID      KLEN     KMID2       KUP      KUP2  \\\n",
+       " instrument datetime                                                       \n",
+       " SH600009   2017-01-03  0.003766  0.014313  0.263153  0.004896  0.342109   \n",
+       "            2017-01-04  0.003747  0.008243  0.454545  0.002248  0.272727   \n",
+       "            2017-01-05 -0.001117  0.006701 -0.166665  0.003723  0.555549   \n",
+       "            2017-01-06  0.003357  0.005222  0.642861  0.001865  0.357139   \n",
+       "            2017-01-09 -0.000372  0.007063 -0.052630  0.003717  0.526312   \n",
+       " ...                         ...       ...       ...       ...       ...   \n",
+       "            2018-12-24  0.016990  0.024879  0.682930  0.003236  0.130080   \n",
+       "            2018-12-25 -0.003584  0.012940 -0.276923  0.000000  0.000000   \n",
+       "            2018-12-26  0.008934  0.025809  0.346154  0.009529  0.369232   \n",
+       "            2018-12-27  0.003505  0.020643  0.169808  0.002532  0.122644   \n",
+       "            2018-12-28 -0.014369  0.040583 -0.354068  0.000000  0.000000   \n",
+       " \n",
+       "                            KLOW     KLOW2      KSFT     KSFT2     OPEN0  ...  \\\n",
+       " instrument datetime                                                      ...   \n",
+       " SH600009   2017-01-03  0.005650  0.394738  0.004520  0.315783  0.996248  ...   \n",
+       "            2017-01-04  0.002248  0.272727  0.003747  0.454545  0.996267  ...   \n",
+       "            2017-01-05  0.001862  0.277786 -0.002978 -0.444427  1.001118  ...   \n",
+       "            2017-01-06  0.000000  0.000000  0.001492  0.285722  0.996654  ...   \n",
+       "            2017-01-09  0.002974  0.421058 -0.001115 -0.157885  1.000372  ...   \n",
+       " ...                         ...       ...       ...       ...       ...  ...   \n",
+       "            2018-12-24  0.004652  0.186990  0.018406  0.739840  0.983294  ...   \n",
+       "            2018-12-25  0.009357  0.723077  0.005773  0.446153  1.003596  ...   \n",
+       "            2018-12-26  0.007346  0.284614  0.006750  0.261536  0.991145  ...   \n",
+       "            2018-12-27  0.014606  0.707547  0.015579  0.754711  0.996507  ...   \n",
+       "            2018-12-28  0.026214  0.645932  0.011845  0.291864  1.014578  ...   \n",
+       " \n",
+       "                         VSUMP60   VSUMN60    IMXD60    CNTD60    SUMD60  \\\n",
+       " instrument datetime                                                       \n",
+       " SH600009   2017-01-03  0.500261  0.499739  0.233333  0.033333 -0.064313   \n",
+       "            2017-01-04  0.513446  0.486554  0.233333  0.033333 -0.072427   \n",
+       "            2017-01-05  0.505354  0.494646  0.233333  0.066667 -0.062261   \n",
+       "            2017-01-06  0.504645  0.495355  0.233333  0.066667 -0.058674   \n",
+       "            2017-01-09  0.507034  0.492966  0.233333  0.033333 -0.076199   \n",
+       " ...                         ...       ...       ...       ...       ...   \n",
+       "            2018-12-24  0.481363  0.518637 -0.266667 -0.116667 -0.090383   \n",
+       "            2018-12-25  0.490570  0.509430 -0.266667 -0.150000 -0.093858   \n",
+       "            2018-12-26  0.478630  0.521370 -0.266667 -0.150000 -0.104248   \n",
+       "            2018-12-27  0.483175  0.516825 -0.266667 -0.150000 -0.096658   \n",
+       "            2018-12-28  0.514442  0.485558 -0.250000 -0.183333 -0.114101   \n",
+       " \n",
+       "                         VSUMD60    BETA60    RSQR60        RESI60     close  \n",
+       " instrument datetime                                                          \n",
+       " SH600009   2017-01-03  0.000522 -0.001254  0.431988  1.199041e-14  2.492395  \n",
+       "            2017-01-04  0.026891 -0.001201  0.406843  1.731948e-14  2.505387  \n",
+       "            2017-01-05  0.010709 -0.001145  0.379073  3.996803e-15  2.509189  \n",
+       "            2017-01-06  0.009290 -0.001069  0.341707  1.465494e-14  2.515526  \n",
+       "            2017-01-09  0.014067 -0.000974  0.299397 -1.598721e-14  2.514575  \n",
+       " ...                         ...       ...       ...           ...       ...  \n",
+       "            2018-12-24 -0.037274 -0.009031  0.362603  1.207923e-13  4.806084  \n",
+       "            2018-12-25 -0.018859 -0.008390  0.332818  5.861978e-14  4.783904  \n",
+       "            2018-12-26 -0.042740 -0.007361  0.288594  8.881784e-16  4.857414  \n",
+       "            2018-12-27 -0.033650 -0.006145  0.233712  4.440892e-15  4.925539  \n",
+       "            2018-12-28  0.028885 -0.004936  0.186404 -2.575717e-14  4.851711  \n",
+       " \n",
+       " [487 rows x 159 columns],\n",
+       "                            KMID      KLEN     KMID2       KUP      KUP2  \\\n",
+       " instrument datetime                                                       \n",
+       " SH600009   2018-01-02 -0.013333  0.026667 -0.500001  0.007333  0.275001   \n",
+       "            2018-01-03 -0.008776  0.027003 -0.324999  0.011026  0.408333   \n",
+       "            2018-01-04  0.002729  0.019327  0.141177  0.007503  0.388235   \n",
+       "            2018-01-05 -0.003836  0.012184 -0.314821  0.005189  0.425925   \n",
+       "            2018-01-08 -0.025368  0.036693 -0.691361  0.004530  0.123457   \n",
+       " ...                         ...       ...       ...       ...       ...   \n",
+       "            2018-12-24  0.016990  0.024879  0.682930  0.003236  0.130080   \n",
+       "            2018-12-25 -0.003584  0.012940 -0.276923  0.000000  0.000000   \n",
+       "            2018-12-26  0.008934  0.025809  0.346154  0.009529  0.369232   \n",
+       "            2018-12-27  0.003505  0.020643  0.169808  0.002532  0.122644   \n",
+       "            2018-12-28 -0.014369  0.040583 -0.354068  0.000000  0.000000   \n",
+       " \n",
+       "                            KLOW     KLOW2      KSFT     KSFT2     OPEN0  ...  \\\n",
+       " instrument datetime                                                      ...   \n",
+       " SH600009   2018-01-02  0.006000  0.224998 -0.014667 -0.550004  1.013514  ...   \n",
+       "            2018-01-03  0.007201  0.266668 -0.012601 -0.466663  1.008854  ...   \n",
+       "            2018-01-04  0.009095  0.470588  0.004320  0.223529  0.997279  ...   \n",
+       "            2018-01-05  0.003159  0.259254 -0.005867 -0.481492  1.003851  ...   \n",
+       "            2018-01-08  0.006795  0.185182 -0.023103 -0.629635  1.026028  ...   \n",
+       " ...                         ...       ...       ...       ...       ...  ...   \n",
+       "            2018-12-24  0.004652  0.186990  0.018406  0.739840  0.983294  ...   \n",
+       "            2018-12-25  0.009357  0.723077  0.005773  0.446153  1.003596  ...   \n",
+       "            2018-12-26  0.007346  0.284614  0.006750  0.261536  0.991145  ...   \n",
+       "            2018-12-27  0.014606  0.707547  0.015579  0.754711  0.996507  ...   \n",
+       "            2018-12-28  0.026214  0.645932  0.011845  0.291864  1.014578  ...   \n",
+       " \n",
+       "                         VSUMP60   VSUMN60    IMXD60    CNTD60    SUMD60  \\\n",
+       " instrument datetime                                                       \n",
+       " SH600009   2018-01-02  0.489987  0.510013  0.500000  0.200000  0.144562   \n",
+       "            2018-01-03  0.493976  0.506024  0.483333  0.200000  0.155675   \n",
+       "            2018-01-04  0.493374  0.506626  0.466667  0.200000  0.139396   \n",
+       "            2018-01-05  0.483186  0.516814  0.433333  0.200000  0.109620   \n",
+       "            2018-01-08  0.517749  0.482251  0.433333  0.166667  0.076659   \n",
+       " ...                         ...       ...       ...       ...       ...   \n",
+       "            2018-12-24  0.481363  0.518637 -0.266667 -0.116667 -0.090383   \n",
+       "            2018-12-25  0.490570  0.509430 -0.266667 -0.150000 -0.093858   \n",
+       "            2018-12-26  0.478630  0.521370 -0.266667 -0.150000 -0.104248   \n",
+       "            2018-12-27  0.483175  0.516825 -0.266667 -0.150000 -0.096658   \n",
+       "            2018-12-28  0.514442  0.485558 -0.250000 -0.183333 -0.114101   \n",
+       " \n",
+       "                         VSUMD60    BETA60    RSQR60        RESI60     close  \n",
+       " instrument datetime                                                          \n",
+       " SH600009   2018-01-02 -0.020025  0.007195  0.508907  6.217249e-15  4.201837  \n",
+       "            2018-01-03 -0.012047  0.006612  0.484316 -5.639933e-14  4.168568  \n",
+       "            2018-01-04 -0.013252  0.006134  0.458732 -3.730349e-14  4.173321  \n",
+       "            2018-01-05 -0.033627  0.005853  0.437345  2.309264e-14  4.178073  \n",
+       "            2018-01-08  0.035497  0.005385  0.392314  1.154632e-14  4.072243  \n",
+       " ...                         ...       ...       ...           ...       ...  \n",
+       "            2018-12-24 -0.037274 -0.009031  0.362603  1.207923e-13  4.806084  \n",
+       "            2018-12-25 -0.018859 -0.008390  0.332818  5.861978e-14  4.783904  \n",
+       "            2018-12-26 -0.042740 -0.007361  0.288594  8.881784e-16  4.857414  \n",
+       "            2018-12-27 -0.033650 -0.006145  0.233712  4.440892e-15  4.925539  \n",
+       "            2018-12-28  0.028885 -0.004936  0.186404 -2.575717e-14  4.851711  \n",
+       " \n",
+       " [243 rows x 159 columns]]"
+      ]
+     },
+     "execution_count": 62,
+     "metadata": {},
+     "output_type": "execute_result"
+    }
+   ],
    "source": [
-    "dl.load(instruments=\"csi300\")"
+    "ds.prepare(['train','valid','test'])"
    ]
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 72,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[834910:MainThread](2024-11-10 10:54:49,543) INFO - qlib.Initialization - [config.py:416] - default_conf: client.\n",
+      "[834910:MainThread](2024-11-10 10:54:49,553) INFO - qlib.Initialization - [__init__.py:74] - qlib successfully initialized based on client settings.\n",
+      "[834910:MainThread](2024-11-10 10:54:49,556) INFO - qlib.Initialization - [__init__.py:76] - data_path={'__DEFAULT_FREQ': PosixPath('/mnt/disk1/JXH/02_workspace/毕设_量化智能助手/data/raw/qlib_data/cn_data')}\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[834910:MainThread](2024-11-10 10:55:24,875) INFO - qlib.timer - [log.py:127] - Time cost: 35.316s | Loading data Done\n",
+      "[834910:MainThread](2024-11-10 10:55:24,878) INFO - qlib.timer - [log.py:127] - Time cost: 0.000s | fit & process data Done\n",
+      "[834910:MainThread](2024-11-10 10:55:24,879) INFO - qlib.timer - [log.py:127] - Time cost: 35.321s | Init data Done\n"
+     ]
+    }
+   ],
+   "source": [
+    "import qlib\n",
+    "import pandas as pd\n",
+    "from qlib.contrib.data.handler import Alpha158\n",
+    "from qlib.data.dataset.handler import DataHandlerLP\n",
+    "from qlib.data.dataset.loader import StaticDataLoader, QlibDataLoader, DLWParser\n",
+    "from qlib.data.dataset import DatasetH\n",
+    "\n",
+    "## 特征与标签配置\n",
+    "feature_config = Alpha158.parse_config_to_fields(dict(price={\"windows\": [0],\"feature\": [\"OPEN\", \"HIGH\", \"LOW\", \"VWAP\"]},rolling={},kbar={}))\n",
+    "label_config = ([\"Ref($close, -1)/$close-1\"],['LABEL0']) \n",
+    "\n",
+    "## 加载数据\n",
+    "qlib.init(provider_uri = \"../data/raw/qlib_data/cn_data\")\n",
+    "dl = QlibDataLoader(config = {\"feature\":feature_config, \"label\":label_config})\n",
+    "# df = pd.read_csv('../data/cleaned/csi300_stock_feats.csv', index_col=[\"datetime\"])\n",
+    "# instruments = df.groupby(by='instrument')\n",
+    "# for name, instrument in instruments:\n",
+    "#     print(name)\n",
+    "#     df2=compute_features(instrument, *feature_config)\n",
+    "# df = df.loc[df['instrument'] == 'SH600005']\n",
+    "# df2=compute_features(df, *feature_config)\n",
+    "# df = compute_features(df, *label_config)\n",
+    "# dl = StaticDataLoader(config=df)\n",
+    "\n",
+    "## 创建数据处理器\n",
+    "dh = DataHandlerLP(instruments='csi300', data_loader=dl)\n",
+    "# ## 创建数据集\n",
+    "ds = DatasetH(handler=dh,segments={\"train\": ('20160101', '20161231'), \"valid\": ('20170101', '20171231'),\"test\": ('20180101', '20181231')})"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 73,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -142,9 +859,31 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 63,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[834910:MainThread](2024-11-10 10:48:46,990) INFO - qlib.workflow - [exp.py:258] - Experiment 3 starts running ...\n",
+      "[834910:MainThread](2024-11-10 10:48:47,015) INFO - qlib.workflow - [recorder.py:341] - Recorder cd70b989b82743a4b164080361efe7bf starts running under Experiment 3 ...\n",
+      "[834910:MainThread](2024-11-10 10:48:47,503) INFO - qlib.timer - [log.py:127] - Time cost: 0.106s | waiting `async_log` Done\n"
+     ]
+    },
+    {
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Training until validation scores don't improve for 50 rounds\n",
+      "[20]\ttrain's l2: 0.00744806\tvalid's l2: 3.49668\n",
+      "[40]\ttrain's l2: 0.00744806\tvalid's l2: 3.49668\n",
+      "[60]\ttrain's l2: 0.00744806\tvalid's l2: 3.49668\n",
+      "Early stopping, best iteration is:\n",
+      "[25]\ttrain's l2: 0.00744806\tvalid's l2: 3.49668\n"
+     ]
+    }
+   ],
    "source": [
     "# 训练模型\n",
     "from qlib.workflow import R\n",
@@ -154,9 +893,60 @@
   },
   {
    "cell_type": "code",
-   "execution_count": null,
+   "execution_count": 66,
    "metadata": {},
-   "outputs": [],
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[834910:MainThread](2024-11-10 10:51:25,876) WARNING - qlib.BaseExecutor - [executor.py:121] - `common_infra` is not set for <qlib.backtest.executor.SimulatorExecutor object at 0x778639b31100>\n",
+      "[834910:MainThread](2024-11-10 10:51:25,891) INFO - qlib.backtest caller - [__init__.py:93] - Create new exchange\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[834910:MainThread](2024-11-10 10:51:31,727) WARNING - qlib.online operator - [exchange.py:219] - $close field data contains nan.\n",
+      "[834910:MainThread](2024-11-10 10:51:31,730) WARNING - qlib.online operator - [exchange.py:219] - $close field data contains nan.\n",
+      "backtest loop:   0%|          | 0/243 [00:00<?, ?it/s]\n"
+     ]
+    },
+    {
+     "ename": "TypeError",
+     "evalue": "Level type mismatch: 2017-12-29 00:00:00",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/multi.py:2793\u001b[0m, in \u001b[0;36mMultiIndex._partial_tup_index\u001b[0;34m(self, tup, side)\u001b[0m\n\u001b[1;32m   2792\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 2793\u001b[0m     loc \u001b[38;5;241m=\u001b[39m \u001b[43malgos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msearchsorted\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlev\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlab\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mside\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mside\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   2794\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m   2795\u001b[0m     \u001b[38;5;66;03m# non-comparable e.g. test_slice_locs_with_type_mismatch\u001b[39;00m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/algorithms.py:1669\u001b[0m, in \u001b[0;36msearchsorted\u001b[0;34m(arr, value, side, sorter)\u001b[0m\n\u001b[1;32m   1667\u001b[0m \u001b[38;5;66;03m# Argument 1 to \"searchsorted\" of \"ndarray\" has incompatible type\u001b[39;00m\n\u001b[1;32m   1668\u001b[0m \u001b[38;5;66;03m# \"Union[NumpyValueArrayLike, ExtensionArray]\"; expected \"NumpyValueArrayLike\"\u001b[39;00m\n\u001b[0;32m-> 1669\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43marr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msearchsorted\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mside\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mside\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msorter\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msorter\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/base.py:1298\u001b[0m, in \u001b[0;36mIndexOpsMixin.searchsorted\u001b[0;34m(self, value, side, sorter)\u001b[0m\n\u001b[1;32m   1296\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m values\u001b[38;5;241m.\u001b[39msearchsorted(value, side\u001b[38;5;241m=\u001b[39mside, sorter\u001b[38;5;241m=\u001b[39msorter)\n\u001b[0;32m-> 1298\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43malgorithms\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msearchsorted\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1299\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalues\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1300\u001b[0m \u001b[43m    \u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1301\u001b[0m \u001b[43m    \u001b[49m\u001b[43mside\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mside\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1302\u001b[0m \u001b[43m    \u001b[49m\u001b[43msorter\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msorter\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1303\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/algorithms.py:1669\u001b[0m, in \u001b[0;36msearchsorted\u001b[0;34m(arr, value, side, sorter)\u001b[0m\n\u001b[1;32m   1667\u001b[0m \u001b[38;5;66;03m# Argument 1 to \"searchsorted\" of \"ndarray\" has incompatible type\u001b[39;00m\n\u001b[1;32m   1668\u001b[0m \u001b[38;5;66;03m# \"Union[NumpyValueArrayLike, ExtensionArray]\"; expected \"NumpyValueArrayLike\"\u001b[39;00m\n\u001b[0;32m-> 1669\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43marr\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msearchsorted\u001b[49m\u001b[43m(\u001b[49m\u001b[43mvalue\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mside\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mside\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msorter\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43msorter\u001b[49m\u001b[43m)\u001b[49m\n",
+      "\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'str' and 'Timestamp'",
+      "\nThe above exception was the direct cause of the following exception:\n",
+      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[66], line 10\u001b[0m\n\u001b[1;32m      8\u001b[0m strategy_obj \u001b[38;5;241m=\u001b[39m TopkDropoutStrategy(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mSTRATEGY_CONFIG)\n\u001b[1;32m      9\u001b[0m \u001b[38;5;66;03m# 执行回测\u001b[39;00m\n\u001b[0;32m---> 10\u001b[0m report_normal, positions_normal \u001b[38;5;241m=\u001b[39m \u001b[43mbacktest_daily\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m     11\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstart_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m2018-01-01\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m2018-12-31\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstrategy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstrategy_obj\u001b[49m\n\u001b[1;32m     12\u001b[0m \u001b[43m)\u001b[49m\n\u001b[1;32m     13\u001b[0m \u001b[38;5;66;03m# 分析回测结果\u001b[39;00m\n\u001b[1;32m     14\u001b[0m analysis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mdict\u001b[39m()\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/contrib/evaluate.py:244\u001b[0m, in \u001b[0;36mbacktest_daily\u001b[0;34m(start_time, end_time, strategy, executor, account, benchmark, exchange_kwargs, pos_type)\u001b[0m\n\u001b[1;32m    241\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m exchange_kwargs \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    242\u001b[0m     _exchange_kwargs\u001b[38;5;241m.\u001b[39mupdate(exchange_kwargs)\n\u001b[0;32m--> 244\u001b[0m portfolio_metric_dict, indicator_dict \u001b[38;5;241m=\u001b[39m \u001b[43mbacktest_func\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    245\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstart_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstart_time\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    246\u001b[0m \u001b[43m    \u001b[49m\u001b[43mend_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mend_time\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    247\u001b[0m \u001b[43m    \u001b[49m\u001b[43mstrategy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstrategy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    248\u001b[0m \u001b[43m    \u001b[49m\u001b[43mexecutor\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mexecutor\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    249\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccount\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccount\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    250\u001b[0m \u001b[43m    \u001b[49m\u001b[43mbenchmark\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbenchmark\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    251\u001b[0m \u001b[43m    \u001b[49m\u001b[43mexchange_kwargs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43m_exchange_kwargs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    252\u001b[0m \u001b[43m    \u001b[49m\u001b[43mpos_type\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpos_type\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    253\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    254\u001b[0m analysis_freq \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(\u001b[38;5;241m*\u001b[39mFreq\u001b[38;5;241m.\u001b[39mparse(freq))\n\u001b[1;32m    256\u001b[0m report_normal, positions_normal \u001b[38;5;241m=\u001b[39m portfolio_metric_dict\u001b[38;5;241m.\u001b[39mget(analysis_freq)\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/backtest/__init__.py:276\u001b[0m, in \u001b[0;36mbacktest\u001b[0;34m(start_time, end_time, strategy, executor, benchmark, account, exchange_kwargs, pos_type)\u001b[0m\n\u001b[1;32m    227\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"initialize the strategy and executor, then backtest function for the interaction of the outermost strategy and\u001b[39;00m\n\u001b[1;32m    228\u001b[0m \u001b[38;5;124;03mexecutor in the nested decision execution\u001b[39;00m\n\u001b[1;32m    229\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    264\u001b[0m \n\u001b[1;32m    265\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    266\u001b[0m trade_strategy, trade_executor \u001b[38;5;241m=\u001b[39m get_strategy_executor(\n\u001b[1;32m    267\u001b[0m     start_time,\n\u001b[1;32m    268\u001b[0m     end_time,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    274\u001b[0m     pos_type\u001b[38;5;241m=\u001b[39mpos_type,\n\u001b[1;32m    275\u001b[0m )\n\u001b[0;32m--> 276\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mbacktest_loop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart_time\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend_time\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrade_strategy\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtrade_executor\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/backtest/backtest.py:44\u001b[0m, in \u001b[0;36mbacktest_loop\u001b[0;34m(start_time, end_time, trade_strategy, trade_executor)\u001b[0m\n\u001b[1;32m     32\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"backtest function for the interaction of the outermost strategy and executor in the nested decision execution\u001b[39;00m\n\u001b[1;32m     33\u001b[0m \n\u001b[1;32m     34\u001b[0m \u001b[38;5;124;03mplease refer to the docs of `collect_data_loop`\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     41\u001b[0m \u001b[38;5;124;03m    it computes the trading indicator\u001b[39;00m\n\u001b[1;32m     42\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m     43\u001b[0m return_value: \u001b[38;5;28mdict\u001b[39m \u001b[38;5;241m=\u001b[39m {}\n\u001b[0;32m---> 44\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _decision \u001b[38;5;129;01min\u001b[39;00m collect_data_loop(start_time, end_time, trade_strategy, trade_executor, return_value):\n\u001b[1;32m     45\u001b[0m     \u001b[38;5;28;01mpass\u001b[39;00m\n\u001b[1;32m     47\u001b[0m portfolio_dict \u001b[38;5;241m=\u001b[39m cast(PORT_METRIC, return_value\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mportfolio_dict\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/backtest/backtest.py:89\u001b[0m, in \u001b[0;36mcollect_data_loop\u001b[0;34m(start_time, end_time, trade_strategy, trade_executor, return_value)\u001b[0m\n\u001b[1;32m     87\u001b[0m _execute_result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m     88\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m trade_executor\u001b[38;5;241m.\u001b[39mfinished():\n\u001b[0;32m---> 89\u001b[0m     _trade_decision: BaseTradeDecision \u001b[38;5;241m=\u001b[39m \u001b[43mtrade_strategy\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgenerate_trade_decision\u001b[49m\u001b[43m(\u001b[49m\u001b[43m_execute_result\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     90\u001b[0m     _execute_result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01myield from\u001b[39;00m trade_executor\u001b[38;5;241m.\u001b[39mcollect_data(_trade_decision, level\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)\n\u001b[1;32m     91\u001b[0m     trade_strategy\u001b[38;5;241m.\u001b[39mpost_exe_step(_execute_result)\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/contrib/strategy/signal_strategy.py:143\u001b[0m, in \u001b[0;36mTopkDropoutStrategy.generate_trade_decision\u001b[0;34m(self, execute_result)\u001b[0m\n\u001b[1;32m    141\u001b[0m trade_start_time, trade_end_time \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrade_calendar\u001b[38;5;241m.\u001b[39mget_step_time(trade_step)\n\u001b[1;32m    142\u001b[0m pred_start_time, pred_end_time \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mtrade_calendar\u001b[38;5;241m.\u001b[39mget_step_time(trade_step, shift\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[0;32m--> 143\u001b[0m pred_score \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msignal\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_signal\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpred_start_time\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mpred_end_time\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    144\u001b[0m \u001b[38;5;66;03m# NOTE: the current version of topk dropout strategy can't handle pd.DataFrame(multiple signal)\u001b[39;00m\n\u001b[1;32m    145\u001b[0m \u001b[38;5;66;03m# So it only leverage the first col of signal\u001b[39;00m\n\u001b[1;32m    146\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(pred_score, pd\u001b[38;5;241m.\u001b[39mDataFrame):\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/backtest/signal.py:64\u001b[0m, in \u001b[0;36mSignalWCache.get_signal\u001b[0;34m(self, start_time, end_time)\u001b[0m\n\u001b[1;32m     60\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mget_signal\u001b[39m(\u001b[38;5;28mself\u001b[39m, start_time: pd\u001b[38;5;241m.\u001b[39mTimestamp, end_time: pd\u001b[38;5;241m.\u001b[39mTimestamp) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Union[pd\u001b[38;5;241m.\u001b[39mSeries, pd\u001b[38;5;241m.\u001b[39mDataFrame]:\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;66;03m# the frequency of the signal may not align with the decision frequency of strategy\u001b[39;00m\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;66;03m# so resampling from the data is necessary\u001b[39;00m\n\u001b[1;32m     63\u001b[0m     \u001b[38;5;66;03m# the latest signal leverage more recent data and therefore is used in trading.\u001b[39;00m\n\u001b[0;32m---> 64\u001b[0m     signal \u001b[38;5;241m=\u001b[39m \u001b[43mresam_ts_data\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msignal_cache\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstart_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstart_time\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend_time\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mend_time\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmethod\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mlast\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     65\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m signal\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/qlib/utils/resam.py:188\u001b[0m, in \u001b[0;36mresam_ts_data\u001b[0;34m(ts_feature, start_time, end_time, method, method_kwargs)\u001b[0m\n\u001b[1;32m    186\u001b[0m datetime_level \u001b[38;5;241m=\u001b[39m get_level_index(feature, level\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mdatetime\u001b[39m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m datetime_level:\n\u001b[0;32m--> 188\u001b[0m     feature \u001b[38;5;241m=\u001b[39m \u001b[43mfeature\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mloc\u001b[49m\u001b[43m[\u001b[49m\u001b[43mselector_datetime\u001b[49m\u001b[43m]\u001b[49m\n\u001b[1;32m    189\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    190\u001b[0m     feature \u001b[38;5;241m=\u001b[39m feature\u001b[38;5;241m.\u001b[39mloc(axis\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0\u001b[39m)[(\u001b[38;5;28mslice\u001b[39m(\u001b[38;5;28;01mNone\u001b[39;00m), selector_datetime)]\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexing.py:1073\u001b[0m, in \u001b[0;36m_LocationIndexer.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   1070\u001b[0m axis \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39maxis \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;241m0\u001b[39m\n\u001b[1;32m   1072\u001b[0m maybe_callable \u001b[38;5;241m=\u001b[39m com\u001b[38;5;241m.\u001b[39mapply_if_callable(key, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj)\n\u001b[0;32m-> 1073\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_getitem_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mmaybe_callable\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexing.py:1290\u001b[0m, in \u001b[0;36m_LocIndexer._getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1288\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, \u001b[38;5;28mslice\u001b[39m):\n\u001b[1;32m   1289\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_validate_key(key, axis)\n\u001b[0;32m-> 1290\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_get_slice_axis\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxis\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maxis\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1291\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m com\u001b[38;5;241m.\u001b[39mis_bool_indexer(key):\n\u001b[1;32m   1292\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getbool_axis(key, axis\u001b[38;5;241m=\u001b[39maxis)\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexing.py:1324\u001b[0m, in \u001b[0;36m_LocIndexer._get_slice_axis\u001b[0;34m(self, slice_obj, axis)\u001b[0m\n\u001b[1;32m   1321\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m obj\u001b[38;5;241m.\u001b[39mcopy(deep\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m   1323\u001b[0m labels \u001b[38;5;241m=\u001b[39m obj\u001b[38;5;241m.\u001b[39m_get_axis(axis)\n\u001b[0;32m-> 1324\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[43mlabels\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mslice_indexer\u001b[49m\u001b[43m(\u001b[49m\u001b[43mslice_obj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mslice_obj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstop\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mslice_obj\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1326\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(indexer, \u001b[38;5;28mslice\u001b[39m):\n\u001b[1;32m   1327\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mobj\u001b[38;5;241m.\u001b[39m_slice(indexer, axis\u001b[38;5;241m=\u001b[39maxis)\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/base.py:6559\u001b[0m, in \u001b[0;36mIndex.slice_indexer\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   6516\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   6517\u001b[0m \u001b[38;5;124;03mCompute the slice indexer for input labels and step.\u001b[39;00m\n\u001b[1;32m   6518\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   6555\u001b[0m \u001b[38;5;124;03mslice(1, 3, None)\u001b[39;00m\n\u001b[1;32m   6556\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   6557\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_deprecated_arg(kind, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkind\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mslice_indexer\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m-> 6559\u001b[0m start_slice, end_slice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mslice_locs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstep\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mstep\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6561\u001b[0m \u001b[38;5;66;03m# return a slice\u001b[39;00m\n\u001b[1;32m   6562\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_scalar(start_slice):\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/multi.py:2775\u001b[0m, in \u001b[0;36mMultiIndex.slice_locs\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   2772\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_deprecated_arg(kind, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkind\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mslice_locs\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m   2773\u001b[0m \u001b[38;5;66;03m# This function adds nothing to its parent implementation (the magic\u001b[39;00m\n\u001b[1;32m   2774\u001b[0m \u001b[38;5;66;03m# happens in get_slice_bound method), but it adds meaningful doc.\u001b[39;00m\n\u001b[0;32m-> 2775\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43msuper\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mslice_locs\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mend\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstep\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/base.py:6767\u001b[0m, in \u001b[0;36mIndex.slice_locs\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   6765\u001b[0m start_slice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[1;32m   6766\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m start \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m-> 6767\u001b[0m     start_slice \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_slice_bound\u001b[49m\u001b[43m(\u001b[49m\u001b[43mstart\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mleft\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m   6768\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m start_slice \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m   6769\u001b[0m     start_slice \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m0\u001b[39m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/multi.py:2714\u001b[0m, in \u001b[0;36mMultiIndex.get_slice_bound\u001b[0;34m(self, label, side, kind)\u001b[0m\n\u001b[1;32m   2712\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(label, \u001b[38;5;28mtuple\u001b[39m):\n\u001b[1;32m   2713\u001b[0m     label \u001b[38;5;241m=\u001b[39m (label,)\n\u001b[0;32m-> 2714\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_partial_tup_index\u001b[49m\u001b[43m(\u001b[49m\u001b[43mlabel\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mside\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mside\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/multi.py:2796\u001b[0m, in \u001b[0;36mMultiIndex._partial_tup_index\u001b[0;34m(self, tup, side)\u001b[0m\n\u001b[1;32m   2793\u001b[0m     loc \u001b[38;5;241m=\u001b[39m algos\u001b[38;5;241m.\u001b[39msearchsorted(lev, lab, side\u001b[38;5;241m=\u001b[39mside)\n\u001b[1;32m   2794\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[1;32m   2795\u001b[0m     \u001b[38;5;66;03m# non-comparable e.g. test_slice_locs_with_type_mismatch\u001b[39;00m\n\u001b[0;32m-> 2796\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLevel type mismatch: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlab\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   2797\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_integer(loc):\n\u001b[1;32m   2798\u001b[0m     \u001b[38;5;66;03m# non-comparable level, e.g. test_groupby_example\u001b[39;00m\n\u001b[1;32m   2799\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mLevel type mismatch: \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mlab\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m)\n",
+      "\u001b[0;31mTypeError\u001b[0m: Level type mismatch: 2017-12-29 00:00:00"
+     ]
+    }
+   ],
    "source": [
     "from qlib.contrib.evaluate import backtest_daily\n",
     "from qlib.contrib.evaluate import risk_analysis\n",
@@ -168,7 +958,7 @@
     "strategy_obj = TopkDropoutStrategy(**STRATEGY_CONFIG)\n",
     "# 执行回测\n",
     "report_normal, positions_normal = backtest_daily(\n",
-    "    start_time=\"20210101\", end_time=\"20211231\", strategy=strategy_obj\n",
+    "    start_time=\"2018-01-01\", end_time=\"2018-12-31\", strategy=strategy_obj\n",
     ")\n",
     "# 分析回测结果\n",
     "analysis = dict()\n",
@@ -177,6 +967,29 @@
     "analysis_df = pd.concat(analysis)  # type: pd.DataFrame\n",
     "print(analysis_df)"
    ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 71,
+   "metadata": {},
+   "outputs": [
+    {
+     "ename": "IndexError",
+     "evalue": "only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices",
+     "output_type": "error",
+     "traceback": [
+      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[71], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mdf\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mindex\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mdatetime\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m]\u001b[49m\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/multi.py:2129\u001b[0m, in \u001b[0;36mMultiIndex.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2126\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   2127\u001b[0m     key \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39masarray(key)\n\u001b[0;32m-> 2129\u001b[0m new_codes \u001b[38;5;241m=\u001b[39m [level_codes[key] \u001b[38;5;28;01mfor\u001b[39;00m level_codes \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcodes]\n\u001b[1;32m   2131\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m MultiIndex(\n\u001b[1;32m   2132\u001b[0m     levels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlevels,\n\u001b[1;32m   2133\u001b[0m     codes\u001b[38;5;241m=\u001b[39mnew_codes,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   2136\u001b[0m     verify_integrity\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m   2137\u001b[0m )\n",
+      "File \u001b[0;32m/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/pandas/core/indexes/multi.py:2129\u001b[0m, in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m   2126\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(key, Index):\n\u001b[1;32m   2127\u001b[0m     key \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39masarray(key)\n\u001b[0;32m-> 2129\u001b[0m new_codes \u001b[38;5;241m=\u001b[39m [\u001b[43mlevel_codes\u001b[49m\u001b[43m[\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m]\u001b[49m \u001b[38;5;28;01mfor\u001b[39;00m level_codes \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcodes]\n\u001b[1;32m   2131\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m MultiIndex(\n\u001b[1;32m   2132\u001b[0m     levels\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mlevels,\n\u001b[1;32m   2133\u001b[0m     codes\u001b[38;5;241m=\u001b[39mnew_codes,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   2136\u001b[0m     verify_integrity\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m   2137\u001b[0m )\n",
+      "\u001b[0;31mIndexError\u001b[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices"
+     ]
+    }
+   ],
+   "source": [
+    "df.index[:,'datetime']"
+   ]
   }
  ],
  "metadata": {
