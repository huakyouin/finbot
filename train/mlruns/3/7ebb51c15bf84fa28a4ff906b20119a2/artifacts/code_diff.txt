diff --git a/.gitignore b/.gitignore
index d650fc6..080396d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,2 @@
 models/
-data/raw/
+data/
diff --git a/README.md b/README.md
index 9815505..05c5c7f 100644
--- a/README.md
+++ b/README.md
@@ -2,15 +2,15 @@
 
 1. 运行 `setup_environment.sh` 以配置环境：
    ```bash
-   sh scripts/setup_environment.sh
+   source scripts/setup_environment.sh
    ```
 
 2. 运行 `download_model.sh` 下载模型文件：
     ```bash
-    sh scripts/download_model.sh
+    source scripts/download_model.sh
     ```
     
 3. 运行 `download_data.sh` 下载数据文件：
     ```bash
-    sh scripts/download_data.sh
+    source scripts/download_data.sh
     ```
\ No newline at end of file
diff --git a/scripts/download_data.sh b/scripts/download_data.sh
index 53ea345..db92c3b 100644
--- a/scripts/download_data.sh
+++ b/scripts/download_data.sh
@@ -3,9 +3,12 @@
 # 设置脚本为严格模式，遇到错误时立即退出, 打印错误信息
 set -ex
 
+ENV_NAME="finbot"
+
 echo "开启代理, 如果没有需手动下载"
 source /etc/profile.d/clash.sh
 proxy_on
+conda acitvate $ENV_NAME
 
 echo "股价数据"
 wget https://github.com/chenditc/investment_data/releases/download/2024-08-09/qlib_bin.tar.gz
diff --git a/scripts/download_model.sh b/scripts/download_model.sh
index e6264b1..bfdb736 100644
--- a/scripts/download_model.sh
+++ b/scripts/download_model.sh
@@ -3,9 +3,12 @@
 # 设置脚本为严格模式，遇到错误时立即退出, 打印错误信息
 set -ex
 
+ENV_NAME="finbot"
+
 # 下载开源模型
 echo "Downloading models"
 mkdir -p models
+conda acitvate $ENV_NAME
 
 download_model() {
     local source="$1" 
diff --git a/scripts/setup_environment.sh b/scripts/setup_environment.sh
index ec30ec1..2306c89 100644
--- a/scripts/setup_environment.sh
+++ b/scripts/setup_environment.sh
@@ -5,48 +5,16 @@ set -ex
 
 # 定义环境名称和 Python 版本
 ENV_NAME="finbot"
-PYTHON_VERSION="3.10"
+PYTHON_VERSION="3.8"  ## pyqlib需要version=3.8
 
-# 创建并激活环境
+# 创建环境并激活
 echo "Creating Conda environment '$ENV_NAME' with Python $PYTHON_VERSION..."
 conda create -n $ENV_NAME python=$PYTHON_VERSION notebook -y
-source activate $ENV_NAME
+conda activate $ENV_NAME
 
-# 安装 Python 包
+# 在环境中安装 Python 包
 echo "Installing Python packages..."
 export PIP_INDEX_URL=https://pypi.tuna.tsinghua.edu.cn/simple
-pip install vllm modelscope hf_transfer matplotlib
-
-# 下载开源模型
-echo "Downloading models"
-mkdir -p models
-
-download_model() {
-    local source="$1" 
-    local model_name="$2"
-    local model_dir="$3"
-    echo "Downloading $model_name from $source to ./models/$model_dir..."
-    if [ "$source" = "modelscope" ]; then
-        modelscope download --model "$model_name" --local_dir "./models/$model_dir"
-    elif [ "$source" = "hf" ]; then
-        export HF_ENDPOINT=https://hf-mirror.com
-        export HF_HUB_ENABLE_HF_TRANSFER=1  # 激活huggingface-cli加速模块, 网络不好可关掉
-        huggingface-cli download --resume-download --local-dir-use-symlinks False \
-        "$model_name" --local-dir "./models/$model_dir"
-    else
-        echo "Error: Unsupported model source '$source'."
-        echo " Please use 'modelscope' or 'hf'."
-        return 1  # 返回非零值表示出错
-    fi
-}
-
-download_model modelscope BAAI/bge-large-zh-v1.5 bge-large-zh-v1.5
-download_model modelscope Qwen/Qwen2.5-3B-Instruct Qwen2.5-3B-Instruct
-download_model modelscope qolaris/FinBert FinBert
-
-## huggingface容易下载慢/卡住, 可以清楚缓存再单独跑
-download_model hf ProsusAI/finbert FinBert
-download_model hf openbmb/MiniCPM3-4B MiniCPM3-4B
-
+pip install vllm modelscope hf_transfer matplotlib pyqlib catboost xgboost openpyxl
 
 echo "Setup complete!"
diff --git "a/train/\346\203\205\346\204\237\346\217\220\345\217\226.ipynb" "b/train/\346\203\205\346\204\237\346\217\220\345\217\226.ipynb"
index 3543c89..2abbf5c 100644
--- "a/train/\346\203\205\346\204\237\346\217\220\345\217\226.ipynb"
+++ "b/train/\346\203\205\346\204\237\346\217\220\345\217\226.ipynb"
@@ -2,7 +2,7 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 1,
+   "execution_count": 11,
    "metadata": {},
    "outputs": [
     {
@@ -27,7 +27,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 5,
+   "execution_count": 12,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -175,7 +175,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 7,
+   "execution_count": 13,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -193,7 +193,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 10,
+   "execution_count": 14,
    "metadata": {},
    "outputs": [],
    "source": [
@@ -241,7 +241,7 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 9,
+   "execution_count": 15,
    "metadata": {},
    "outputs": [
     {
@@ -439,7 +439,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.10.15"
+   "version": "3.8.20"
   }
  },
  "nbformat": 4,
diff --git "a/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb" "b/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb"
index 0afe809..1f233eb 100644
--- "a/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb"
+++ "b/train/\350\202\241\344\273\267\351\242\204\346\265\213.ipynb"
@@ -1,5 +1,181 @@
 {
- "cells": [],
+ "cells": [
+  {
+   "cell_type": "code",
+   "execution_count": 1,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# import qlib\n",
+    "# from qlib.workflow import R\n",
+    "# qlib.init(provider_uri = \"../data/raw/qlib_data/cn_data\", region = \"cn\")\n",
+    "# R.set_uri(None) ## 关闭qlib的实验管理记录"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 2,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# from qlib.data import D\n",
+    "# import os\n",
+    "# df = D.features(\n",
+    "#     D.instruments(\"csi300\"),\n",
+    "#     fields=['$adjclose','$amount','$change','$close','$factor','$high','$low','$open','$volume','$vwap'],\n",
+    "#     start_time=\"2016-01-01\",\n",
+    "#     end_time=\"2020-12-31\"\n",
+    "# )\n",
+    "# if not os.path.exists(cleaned_data_path:= '../data/cleaned/csi300_stock_feats.csv'):\n",
+    "#     df.reset_index(inplace=True)\n",
+    "#     df['datetime'] = df['datetime'].dt.strftime('%Y-%m-%d')\n",
+    "#     df.to_csv(cleaned_data_path, index=False, float_format='%.5f')\n",
+    "# df"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 3,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "[230569:MainThread](2024-11-06 09:00:55,920) INFO - qlib.Initialization - [config.py:416] - default_conf: client.\n",
+      "[230569:MainThread](2024-11-06 09:00:56,333) INFO - qlib.Initialization - [__init__.py:74] - qlib successfully initialized based on client settings.\n",
+      "[230569:MainThread](2024-11-06 09:00:56,334) INFO - qlib.Initialization - [__init__.py:76] - data_path={'__DEFAULT_FREQ': PosixPath('/mnt/disk1/JXH/02_workspace/毕设_量化智能助手/data/raw/qlib_data/cn_data')}\n",
+      "[230569:MainThread](2024-11-06 09:01:08,498) INFO - qlib.timer - [log.py:127] - Time cost: 12.162s | Loading data Done\n",
+      "[230569:MainThread](2024-11-06 09:01:08,501) INFO - qlib.timer - [log.py:127] - Time cost: 0.000s | fit & process data Done\n",
+      "[230569:MainThread](2024-11-06 09:01:08,502) INFO - qlib.timer - [log.py:127] - Time cost: 12.167s | Init data Done\n"
+     ]
+    }
+   ],
+   "source": [
+    "import qlib\n",
+    "import pandas as pd\n",
+    "from qlib.contrib.data.handler import Alpha158\n",
+    "from qlib.data.dataset.handler import DataHandlerLP\n",
+    "from qlib.data.dataset.loader import StaticDataLoader, QlibDataLoader\n",
+    "from qlib.data.dataset import DatasetH\n",
+    "\n",
+    "## 特征与标签配置\n",
+    "feature_config = Alpha158.parse_config_to_fields(dict(price={\"windows\": [0],\"feature\": [\"OPEN\", \"HIGH\", \"LOW\", \"VWAP\"]},rolling={},kbar={}))\n",
+    "label_config = ([\"Ref($close, -1)/$close-1\"],['LABEL0']) \n",
+    "\n",
+    "## 加载数据\n",
+    "qlib.init(provider_uri = \"../data/raw/qlib_data/cn_data\")\n",
+    "dl = QlibDataLoader(config = {\"feature\":feature_config, \"label\":label_config})\n",
+    "# df = pd.read_csv('../data/cleaned/csi300_stock_feats.csv', index_col=[\"instrument\",\"datetime\"])\n",
+    "# dl = StaticDataLoader(config=df)\n",
+    "\n",
+    "## 创建数据处理器\n",
+    "dh = DataHandlerLP(\n",
+    "    instruments='csi300', \n",
+    "    start_time='20190101', \n",
+    "    end_time='20211231',\n",
+    "    data_loader=dl\n",
+    ")\n",
+    "\n",
+    "## 创建数据集\n",
+    "ds = DatasetH(handler=dh,segments={\"train\": ('20190101', '20201231'), \"test\": ('20210101', '20211231')})\n"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": 4,
+   "metadata": {},
+   "outputs": [
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/mnt/disk1/JXH/01_apps/miniforge3/envs/finbot/lib/python3.8/site-packages/tqdm/auto.py:21: TqdmWarning: IProgress not found. Please update jupyter and ipywidgets. See https://ipywidgets.readthedocs.io/en/stable/user_install.html\n",
+      "  from .autonotebook import tqdm as notebook_tqdm\n"
+     ]
+    }
+   ],
+   "source": [
+    "from qlib.contrib.model.gbdt import LGBModel\n",
+    "model = LGBModel(\n",
+    "    loss=\"mse\",\n",
+    "    colsample_bytree=0.8879,\n",
+    "    learning_rate=0.0421,\n",
+    "    subsample=0.8789,\n",
+    "    lambda_l1=205.6999,\n",
+    "    lambda_l2=580.9768,\n",
+    "    max_depth=8,\n",
+    "    num_leaves=210,\n",
+    "    num_threads=20,\n",
+    ")"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "# 训练模型\n",
+    "model.fit(ds)"
+   ]
+  },
+  {
+   "cell_type": "code",
+   "execution_count": null,
+   "metadata": {},
+   "outputs": [],
+   "source": [
+    "## 回测分析\n",
+    "from qlib.workflow import R\n",
+    "from qlib.workflow.record_temp import SignalRecord, PortAnaRecord\n",
+    "port_analysis_config = {\n",
+    "    \"executor\": {\n",
+    "        \"class\": \"SimulatorExecutor\",\n",
+    "        \"module_path\": \"qlib.backtest.executor\",\n",
+    "        \"kwargs\": {\n",
+    "            \"time_per_step\": \"day\",\n",
+    "            \"generate_portfolio_metrics\": True,\n",
+    "        },\n",
+    "    },\n",
+    "    \"strategy\": {\n",
+    "        \"class\": \"TopkDropoutStrategy\",\n",
+    "        \"module_path\": \"qlib.contrib.strategy.signal_strategy\",\n",
+    "        \"kwargs\": {\n",
+    "            \"model\": model,\n",
+    "            \"dataset\": ds,\n",
+    "            \"topk\": 50,\n",
+    "            \"n_drop\": 5,\n",
+    "        },\n",
+    "    },\n",
+    "    \"backtest\": {\n",
+    "        \"start_time\": \"2017-01-01\",\n",
+    "        \"end_time\": \"2020-08-01\",\n",
+    "        \"account\": 100000000,\n",
+    "        \"benchmark\": \"SH000300\",\n",
+    "        \"exchange_kwargs\": {\n",
+    "            \"freq\": \"day\",\n",
+    "            \"limit_threshold\": 0.095,\n",
+    "            \"deal_price\": \"close\",\n",
+    "            \"open_cost\": 0.0005,\n",
+    "            \"close_cost\": 0.0015,\n",
+    "            \"min_cost\": 5,\n",
+    "        },\n",
+    "    },\n",
+    "}\n",
+    "\n",
+    "with R.start(experiment_name=\"backtest_analysis\"):\n",
+    "    # prediction\n",
+    "    recorder = R.get_recorder()\n",
+    "    sr = SignalRecord(model, ds)\n",
+    "    sr.generate()\n",
+    "\n",
+    "    # backtest & analysis\n",
+    "    par = PortAnaRecord(recorder, port_analysis_config, \"day\")\n",
+    "    par.generate()"
+   ]
+  }
+ ],
  "metadata": {
   "kernelspec": {
    "display_name": "finbot",
@@ -16,7 +192,7 @@
    "name": "python",
    "nbconvert_exporter": "python",
    "pygments_lexer": "ipython3",
-   "version": "3.10.15"
+   "version": "3.8.20"
   }
  },
  "nbformat": 4,
